@function strip-unit($number) {
  @return $number / ($number * 0 + 1);
}

@function cal-context($baseFontSize: 20, $basePageWidth: 320, $pgWidth: $pegeWidth) {
  @return $baseFontSize * ($pgWidth / $basePageWidth);
}

@function px2rem($pixels, $font-size) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }

  @if (unitless($font-size)) {
    $font-size: $font-size * 1px;
  }
  @return ($pixels / $font-size) * 1rem;
}

@function px2em($pixels, $font-size: $font-size-base) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }

  @if (unitless($font-size)) {
    $font-size: $font-size * 1px;
  }
  @return ($pixels / $font-size) * 1em;
}

@function rem($pixels) {
  $context: cal-context();
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }

  @if (unitless($context)) {
    $context: $context * 1px;
  }
  @return ($pixels / $context) * 1rem;
}

@mixin remify($property, $values...) {
  $max: length($values);
  $remValues: "";

  @for $i from 1 through $max {
    $item: nth($values, $i);
    $value: $item;

    @if type-of($item) == "number" and unit($item) == "px" {
      $value: rem($value);
    }

    $remValues: #{$remValues + $value};

    @if $i < $max {
      $remValues: #{$remValues + " "};
    }
  } 

  #{$property}: $values;
  #{$property}: $remValues; 
}
